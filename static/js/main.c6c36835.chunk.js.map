{"version":3,"sources":["Public.js","Private.js","App.js","serviceWorker.js","index.js"],"names":["Public","Private","AuthExample","basename","process","AuthButton","to","path","LoginPage","PrivateRoute","fakeAuth","isAuthenticated","authenticate","cb","setTimeout","signout","history","useHistory","onClick","push","children","rest","render","location","pathname","state","from","useLocation","replace","Boolean","window","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wOAEaA,EAAS,WACpB,OACE,6BACE,2CACA,gECJOC,EAAU,WACrB,OACE,6BACE,4CACA,4ECOS,SAASC,IACtB,OACE,kBAAC,IAAD,CAAQC,SAAUC,IAChB,6BACE,kBAACC,EAAD,MAEA,4BACE,4BACE,kBAAC,IAAD,CAAMC,GAAG,WAAT,gBAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,cAAT,oBAIJ,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,WACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,UACV,kBAACC,EAAD,OAEF,kBAACC,EAAD,CAAcF,KAAK,cACjB,kBAAC,EAAD,UAQZ,IAAMG,EAAW,CACfC,iBAAiB,EACjBC,aAFe,SAEFC,GACXH,EAASC,iBAAkB,EAC3BG,WAAWD,EAAI,MAEjBE,QANe,SAMPF,GACNH,EAASC,iBAAkB,EAC3BG,WAAWD,EAAI,OAInB,SAASR,IACP,IAAIW,EAAUC,cAEd,OAAOP,EAASC,gBACd,sCACW,IACT,4BACEO,QAAS,WACPR,EAASK,SAAQ,kBAAMC,EAAQG,KAAK,UAFxC,aASF,qDAMJ,SAASV,EAAT,GAA8C,IAAtBW,EAAqB,EAArBA,SAAaC,EAAQ,4BAC3C,OACE,kBAAC,IAAD,iBACMA,EADN,CAEEC,OAAQ,gBAAGC,EAAH,EAAGA,SAAH,OACNb,EAASC,gBACPS,EAEA,kBAAC,IAAD,CACEd,GAAI,CACFkB,SAAU,SACVC,MAAO,CAAEC,KAAMH,UAS7B,SAASf,IACP,IAAIQ,EAAUC,cAGRS,GAFSC,cAESF,OAAS,CAAEC,KAAM,CAAEF,SAAU,OAA/CE,KAON,OACE,6BACE,kEAAwCA,EAAKF,UAC7C,4BAAQN,QATA,WACVR,EAASE,cAAa,WACpBI,EAAQY,QAAQF,QAOhB,WCnGcG,QACW,cAA7BC,OAAOP,SAASQ,UAEe,UAA7BD,OAAOP,SAASQ,UAEhBD,OAAOP,SAASQ,SAASC,MACvB,2DCZNC,IAASX,OACP,kBAAC,IAAMY,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c6c36835.chunk.js","sourcesContent":["import React from 'react'\n\nexport const Public = () => {\n  return(\n    <div>\n      <h1>Public page</h1>\n      <p>A public page with info for all</p>\n    </div>\n  )\n}\n","import React from 'react'\n\nexport const Private = () => {\n  return(\n    <div>\n      <h1>Private page</h1>\n      <p>A priave page with info for authorized user</p>\n    </div>\n  )\n}\n","import React from \"react\"\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  Redirect,\n  useHistory,\n  useLocation\n} from \"react-router-dom\"\nimport { Public } from './Public'\nimport { Private } from './Private'\n\nexport default function AuthExample() {\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <div>\n        <AuthButton />\n\n        <ul>\n          <li>\n            <Link to=\"/public\">Public Page</Link>\n          </li>\n          <li>\n            <Link to=\"/protected\">Protected Page</Link>\n          </li>\n        </ul>\n\n        <Switch>\n          <Route path=\"/public\">\n            <Public />\n          </Route>\n          <Route path=\"/login\">\n            <LoginPage />\n          </Route>\n          <PrivateRoute path=\"/protected\">\n            <Private />\n          </PrivateRoute>\n        </Switch>\n      </div>\n    </Router>\n  )\n}\n\nconst fakeAuth = {\n  isAuthenticated: false,\n  authenticate(cb) {\n    fakeAuth.isAuthenticated = true\n    setTimeout(cb, 3000) // fake async\n  },\n  signout(cb) {\n    fakeAuth.isAuthenticated = false\n    setTimeout(cb, 3000)\n  }\n}\n\nfunction AuthButton() {\n  let history = useHistory()\n\n  return fakeAuth.isAuthenticated ? (\n    <p>\n      Welcome!{\" \"}\n      <button\n        onClick={() => {\n          fakeAuth.signout(() => history.push(\"/\"))\n        }}\n      >\n        Sign out\n      </button>\n    </p>\n  ) : (\n    <p>You are not logged in.</p>\n  )\n}\n\n// A wrapper for <Route> that redirects to the login\n// screen if you're not yet authenticated.\nfunction PrivateRoute({ children, ...rest }) {\n  return (\n    <Route\n      {...rest}\n      render={({ location }) =>\n        fakeAuth.isAuthenticated ? (\n          children\n        ) : (\n          <Redirect\n            to={{\n              pathname: \"/login\",\n              state: { from: location }\n            }}\n          />\n        )\n      }\n    />\n  )\n}\n\nfunction LoginPage() {\n  let history = useHistory()\n  let location = useLocation()\n\n  let { from } = location.state || { from: { pathname: \"/\" } }\n  let login = () => {\n    fakeAuth.authenticate(() => {\n      history.replace(from)\n    })\n  }\n\n  return (\n    <div>\n      <p>You must log in to view the page at {from.pathname}</p>\n      <button onClick={login}>Log in</button>\n    </div>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}